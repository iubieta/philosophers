DESCRICION GENERAL:

	- Uno o mas filosofos se sientan en una mesa redonda a comer.
	- Solo pueden comer, pensar o dormir. Una accion cada vez.
	- En la mesa hay tantos tenedores como filosofos pero para comer un filosofo necesita
	dos tenedores (el de su derecha y el de su izquierda).
	- Despues de comer los filosofos empezaran a dormir y al despertar empezara a pensar.
	- La simulacion se acaba si un filosofo muere de hambre.
	- Los filosofos no pueden hablar entre ellos y no saben si otro filosofo va a morir.
	
NORMAS:

	- No se pueden usar variables globales
	- No se permite usar libft
	- ARGUMETOS: numero de filosofos , tiempo para morir de hambre , tiempo para comer , tiempo 
	para dormir , numero de veces a comer . (El tiempo se mide en milisegundos).
	- Cada filosofo tiene asignado un numero y los adyacentes los correspondientes.
	- LOGS:
		- "timestamp en ms" "X" has taken a fork
		- "timestamp en ms" "X" is eating
		- "timestamp en ms" "X" is sleeping
		- "timestamp en ms" "X" is thinking
		- "timestamp en ms" "X" has died
		* X es el numero del filosofo *
	- Los logs no deben interrumpirse entre si
	- No pueden pasar mas de 10ms ente la muerte de un filosofo y su impresion en el log
	- No debe haber "Data Races", dos hilos distintos (filosofos) no deben acceder a una misma
	variable a la vez.

PROBLEMAS Y SOLUCIONES:

	- Gestion de argumentos / Parseo
	
	- Separacion de procesos / filosofos : cada filosofo debe ser un hilo.

	- Impresion de los logs

	- Data Races / gestion de variables comunes (tenedores) : protegerlos con MUTEX

ENTREGA:

	- Nombre de programa: 	philo
	- Archivos a entregar: 	Makefile, *.h, *.c, en el directorio philo/
	- Makefile: 			NAME, all, clean, fclean, re
	- Argumentos:			number_of_philosophers, time_to_die, time_to_eat, time_to_sleep,
							(number_of_times_each_philosopher_must_eat)

FUNCIONES AUTORIZADAS:
	
	- No se permite usar libft!!
	
	- memset(void *s, int c, size_t n);  
	Inicializa una porción de memoria con un valor específico.

	- printf(const char *format, ...);  
	Imprime datos formateados a la salida estándar.

	- malloc(void *malloc(size_t size);  
	Reserva memoria dinámica.

	- free(void free(void *ptr);  
	Libera la memoria asignada por malloc o calloc.

	- write(ssize_t write(int fd, const void *buf, size_t count);  
	Escribe datos en un descriptor de archivo.

	- usleep(int usleep(useconds_t usec);  
	Suspende la ejecución del programa por una cantidad de microsegundos.

	- gettimeofday(int gettimeofday(struct timeval *tv, struct timezone *tz);  
	Obtiene el tiempo actual.

	- pthread_create(int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);  
	Crea un nuevo hilo.

	- pthread_detach(int pthread_detach(pthread_t thread);  
	Desvincula un hilo, permitiendo que sus recursos sean liberados automáticamente al finalizar.

	- pthread_join(int pthread_join(pthread_t thread, void **retval);  
	Espera a que un hilo termine.

	- pthread_mutex_init(int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);  
	Inicializa un mutex.

	- pthread_mutex_destroy(int pthread_mutex_destroy(pthread_mutex_t *mutex);  
	Destruye un mutex.

	- pthread_mutex_lock(int pthread_mutex_lock(pthread_mutex_t *mutex);  
	Bloquea un mutex.

	- pthread_mutex_unlock(int pthread_mutex_unlock(pthread_mutex_t *mutex);  
	Desbloquea un mutex.
	

NOTAS:
